name: Test package

on:
  push:
    # The CI is executed on every push on every branch
    branches:
      - refactor-vampy
  pull_request:
    # The CI is executed on every pull request to the main branch
    branches:
      - refactor-vampy

  schedule:
    # The CI is executed every day at 8am
    - cron: "0 8 * * *"

env:
  CACHE_NUMBER: 2 # Increase to reset cache

jobs:
  #  check-code:
  #    runs-on: ubuntu-22.04
  #    container: hkjeldsberg/vampy:latest
  #
  #    steps:
  #      # This action sets the current path to the root of your github repo
  #      - uses: actions/checkout@v3
  #
  #      - name: Upgrade pip and setuptools
  #        run: python3 -m pip install pip setuptools --upgrade
  #
  #      - name: Install types-paramiko
  #        run: python3 -m pip install types-paramiko
  #
  #      - name: Install code
  #        run: python3 -m pip install .[test]
  #
  #      - name: Flake8 code
  #        run: python3 -m flake8

  #      - name: mypy code
  #        run: python3 -m mypy --exclude Probe.py

  test-code:
    #runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          os: ubuntu-latest
            label: linux-64
            prefix: /usr/share/miniconda3/envs/my-env
    #          - os: macos-latest
    #            label: osx-64
    #            prefix: /Users/runner/miniconda3/envs/vampy
    #
    #          - os: windows-latest
    #            label: win-64
    #            prefix: C:\Miniconda3\envs\my-env

    # This code depends on the result of check-code
    #    name: ${{ matrix.label }}
    #    runs-on: ${{ matrix.os }}

    name: Test VaMPy on ${{ matrix.label }}
    runs-on: ${{ matrix.os }}

    # https://github.com/marketplace/actions/setup-miniconda#use-a-default-shell
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - uses: actions/checkout@v2

      - name: Upgrade pip and setuptools
        run: |
          python3 -m pip install pip setuptools --upgrade

      # See: https://github.com/marketplace/actions/setup-miniconda
      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          miniforge-variant: Mambaforge
          channels: conda-forge
          python-version: 3.8
          activate-environment: vampy
          environment-file: environment.yml
          use-mamba: true


      #      - name: Setup Mambaforge
      #        uses: conda-incubator/setup-miniconda@v2
      #        with:
      #          miniforge-variant: Mambaforge
      #          miniforge-version: latest
      #          activate-environment: vampy
      #          use-mamba: true

      - name: Set cache date
        run: echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

      - uses: actions/cache@v2
        with:
          path: ${{ matrix.prefix }}
          key: ${{ matrix.label }}-conda-${{ hashFiles('environment.yml') }}-${{ env.DATE }}-${{ env.CACHE_NUMBER }}
        id: cache

      - name: Update environment
        run: mamba env update -n vampy -f environment.yml
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Install VaMPy
        run: python3 -m pip install .[test]

      - name: Run tests
        run: python3 -m pytest tests

      #      - name: Check morphman
      #        run: python3 -c "import morphman"
      #
      #      - name: Check dolfin
      #        run: python3 -c "import dolfin"

      #      - uses: actions/checkout@v3
      #
      #      - name: Check for dockerenv file
      #        run: (ls /.dockerenv && echo Found dockerenv) || (echo No dockerenv)
      #
      #      - name: Upgrade pip and setuptools
      #        run:
      #          python3 -m pip install pip setuptools --upgrade
      #
      #
      #      - name: Check conda
      #        run: conda
      #
      #      - name: Run tests
      #        run: python3 -m pytest
      #
      - name: Upload coverage report as artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: htmlcov
          if-no-files-found: error
